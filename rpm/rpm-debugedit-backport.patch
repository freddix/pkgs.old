diff -aurN rpm-4.5.orig/tools/debugedit.c rpm-4.5/tools/debugedit.c
--- rpm-4.5.orig/tools/debugedit.c	2009-10-11 11:32:18.000000000 +0200
+++ rpm-4.5/tools/debugedit.c	2009-10-11 11:26:09.000000000 +0200
@@ -679,9 +679,12 @@
 	  if (--shrank == 0)
 	    error (EXIT_FAILURE, 0,
 		   "canonicalization unexpectedly shrank by one character");
-	  memset (ptr, 'X', shrank);
-	  ptr += shrank;
-	  *ptr++ = '\0';
+	  else
+	    {	    
+	      memset (ptr, 'X', shrank);
+	      ptr += shrank;
+	      *ptr++ = '\0';
+	    }
 	}
 
       if (abs_dir_cnt + abs_file_cnt != 0)
@@ -791,7 +794,7 @@
 	      {
 		  char *dir;
 
-		  dir = (char *)debug_sections[DEBUG_STR].data
+		  dir = (char *) debug_sections[DEBUG_STR].data
 		      + do_read_32_relocated (ptr);
 
 		  free (comp_dir);
@@ -821,7 +824,7 @@
 	    {
 	      char *name;
 	      
-	      name = (char *)debug_sections[DEBUG_STR].data
+	      name = (char *) debug_sections[DEBUG_STR].data
 		     + do_read_32_relocated (ptr);
 	      if (*name == '/' && comp_dir == NULL)
 		{
@@ -918,6 +921,34 @@
 	  break;
 	}
     }
+
+  /* Ensure the CU current directory will exist even if only empty.  Source
+     filenames possibly located in its parent directories refer relatively to
+     it and the debugger (GDB) cannot safely optimize out the missing
+     CU current dir subdirectories.  */
+  if (comp_dir && list_file_fd != -1)
+    {
+      char *p;
+      size_t size;
+
+      if (base_dir && has_prefix (comp_dir, base_dir))
+	p = comp_dir + strlen (base_dir);
+      else if (dest_dir && has_prefix (comp_dir, dest_dir))
+	p = comp_dir + strlen (dest_dir);
+      else
+	p = comp_dir;
+
+      size = strlen (p) + 1;
+      while (size > 0)
+	{
+	  ssize_t ret = write (list_file_fd, p, size);
+	  if (ret == -1)
+	    break;
+	  size -= ret;
+	  p += ret;
+	}
+    }
+
   if (found_list_offs && comp_dir)
     edit_dwarf2_line (dso, list_offs, comp_dir, phase);
 
@@ -1374,7 +1405,8 @@
      or Elf64 object, only that we are consistent in what bits feed the
      hash so it comes out the same for the same file contents.  */
   {
-    inline void process (const void *data, size_t size)
+    auto inline void process (const void *data, size_t size);
+    auto inline void process (const void *data, size_t size)
     {
       memchunk chunk = { .data = (void *) data, .size = size };
       hashFunctionContextUpdateMC (&ctx, &chunk);
@@ -1443,7 +1475,7 @@
     char hex[build_id_size * 2 + 1];
     int n = snprintf (hex, 3, "%02" PRIx8, id[0]);
     assert (n == 2);
-    for (i = 1; i < build_id_size; ++i)
+    for (i = 1; i < (int)build_id_size; ++i)
       {
 	n = snprintf (&hex[i * 2], 3, "%02" PRIx8, id[i]);
 	assert (n == 2);
@@ -1585,7 +1617,8 @@
 	      Elf_Data src = dst;
 	      src.d_buf = data->d_buf;
 	      assert (sizeof (Elf32_Nhdr) == sizeof (Elf64_Nhdr));
-	      while ((char *) data->d_buf + data->d_size - (char *) src.d_buf > (int) sizeof nh
+	      while ((char *) data->d_buf + data->d_size - 
+		     (char *) src.d_buf > (int) sizeof nh
 		     && elf32_xlatetom (&dst, &src, dso->ehdr.e_ident[EI_DATA]))
 		{
 		  Elf32_Word len = sizeof nh + nh.n_namesz;
@@ -1595,7 +1628,8 @@
 		      && !memcmp ((char *) src.d_buf + sizeof nh, "GNU", sizeof "GNU"))
 		    {
 		      build_id = data;
-		      build_id_offset = (char *) src.d_buf + len - (char *) data->d_buf;
+		      build_id_offset = (char *) src.d_buf + len - 
+					(char *) data->d_buf;
 		      build_id_size = nh.n_descsz;
 		      break;
 		    }
