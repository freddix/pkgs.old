--- glibc-2.10.1/elf/ldd.bash.in	2009-06-08 23:02:27.663745478 +0300
+++ glibc-2.10.1/elf/ldd.bash.in	2009-06-08 23:04:15.706861781 +0300
@@ -1,4 +1,4 @@
-#! @BASH@
+#! /bin/sh
 # Copyright (C) 1996-2011, 2012 Free Software Foundation, Inc.
 # This file is part of the GNU C Library.
 
@@ -36,16 +36,16 @@
   case "$1" in
   --vers | --versi | --versio | --version)
     echo 'ldd (GNU libc) @VERSION@'
-    printf $"Copyright (C) %s Free Software Foundation, Inc.
+    printf "Copyright (C) %s Free Software Foundation, Inc.
 This is free software; see the source for copying conditions.  There is NO
 warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 " "2012"
-    printf $"Written by %s and %s.
+    printf "Written by %s and %s.
 " "Roland McGrath" "Ulrich Drepper"
     exit 0
     ;;
   --h | --he | --hel | --help)
-    echo $"Usage: ldd [OPTION]... FILE...
+    echo "Usage: ldd [OPTION]... FILE...
       --help              print this help and exit
       --version           print version information and exit
   -d, --data-relocs       process data relocations
@@ -53,7 +53,7 @@
   -u, --unused            print unused direct dependencies
   -v, --verbose           print all information
 "
-    echo $"For bug reporting instructions, please see:
+    echo "For bug reporting instructions, please see:
 <http://www.gnu.org/software/libc/bugs.html>.
 "
     exit 0
@@ -79,15 +79,15 @@
     shift
     ;;
   --v | --ve | --ver)
-    echo >&2 $"ldd: option \`$1' is ambiguous"
+    echo >&2 "ldd: option \`$1' is ambiguous"
     exit 1
     ;;
   --)		# Stop option processing.
     shift; break
     ;;
   -*)
-    echo >&2 'ldd:' $"unrecognized option" "\`$1'"
-    echo >&2 $"Try \`ldd --help' for more information."
+    echo >&2 'ldd:' "unrecognized option" "\`$1'"
+    echo >&2 "Try \`ldd --help' for more information."
     exit 1
     ;;
   *)
@@ -112,20 +112,14 @@
 # environments where the executed program might not have permissions
 # to write to the console/tty.  But only bash 3.x supports the pipefail
 # option, and we don't bother to handle the case for older bash versions.
-if set -o pipefail 2> /dev/null; then
-  try_trace() {
-    eval $add_env '"$@"' | cat
-  }
-else
-  try_trace() {
-    eval $add_env '"$@"'
-  }
-fi
+try_trace() {
+  eval $add_env '"$@"'
+}
 
 case $# in
 0)
-  echo >&2 'ldd:' $"missing file arguments"
-  echo >&2 $"Try \`ldd --help' for more information."
+  echo >&2 'ldd:' "missing file arguments"
+  echo >&2 "Try \`ldd --help' for more information."
   exit 1
   ;;
 1)
@@ -147,13 +141,13 @@
      ;;
   esac
   if test ! -e "$file"; then
-    echo "ldd: ${file}:" $"No such file or directory" >&2
+    echo "ldd: ${file}:" "No such file or directory" >&2
     result=1
   elif test ! -f "$file"; then
-    echo "ldd: ${file}:" $"not regular file" >&2
+    echo "ldd: ${file}:" "not regular file" >&2
     result=1
   elif test -r "$file"; then
-    test -x "$file" || echo 'ldd:' $"\
+    test -x "$file" || echo 'ldd:' "\
 warning: you do not have execution permission for" "\`$file'" >&2
     RTLD=
     ret=1
@@ -182,7 +176,7 @@
     1)
       # This can be a non-ELF binary or no binary at all.
       nonelf "$file" || {
-	echo $"	not a dynamic executable"
+	echo "	not a dynamic executable"
 	result=1
       }
       ;;
@@ -190,12 +184,12 @@
       try_trace "$RTLD" "$file" || result=1
       ;;
     *)
-      echo 'ldd:' ${RTLD} $"exited with unknown exit code" "($ret)" >&2
+      echo 'ldd:' ${RTLD} "exited with unknown exit code" "($ret)" >&2
       exit 1
       ;;
     esac
   else
-    echo 'ldd:' $"error: you do not have read permission for" "\`$file'" >&2
+    echo 'ldd:' "error: you do not have read permission for" "\`$file'" >&2
     result=1
   fi
 done
