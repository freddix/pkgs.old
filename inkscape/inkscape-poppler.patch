--- inkscape-0.48.2/src/extension/internal/pdfinput/pdf-parser.cpp	2011-07-08 20:25:09.000000000 +0200
+++ inkscape-0.48.2/src/extension/internal/pdfinput/pdf-parser.cpp	2012-05-27 02:17:07.253947245 +0200
@@ -19,7 +19,7 @@ 
 #endif
 
 extern "C" {
-        
+
 #include <stdlib.h>
 #include <stdio.h>
 #include <stddef.h>
@@ -298,7 +298,7 @@ 
     // do not clip if it's not needed
     if (cropBox->x1 != 0.0 || cropBox->y1 != 0.0 ||
         cropBox->x2 != state->getPageWidth() || cropBox->y2 != state->getPageHeight()) {
-        
+
         state->moveTo(cropBox->x1, cropBox->y1);
         state->lineTo(cropBox->x2, cropBox->y1);
         state->lineTo(cropBox->x2, cropBox->y2);
@@ -331,7 +331,7 @@ 
   state = new GfxState(72, 72, box, 0, gFalse);
   clipHistory = new ClipHistoryEntry();
   setDefaultApproximationPrecision();
-  
+
   fontChanged = gFalse;
   clip = clipNone;
   ignoreUndef = 0;
@@ -367,14 +367,14 @@ 
     for (i = 0; i < obj->arrayGetLength(); ++i) {
       obj->arrayGet(i, &obj2);
       if (!obj2.isStream()) {
-	error(-1, const_cast<char*>("Weird page contents"));
+	error(errInternal, -1, const_cast<char*>("Weird page contents"));
 	obj2.free();
 	return;
       }
       obj2.free();
     }
   } else if (!obj->isStream()) {
-    error(-1, const_cast<char*>("Weird page contents"));
+    error(errInternal, -1, const_cast<char*>("Weird page contents"));
     return;
   }
   parser = new Parser(xref, new Lexer(xref, obj), gFalse);
@@ -419,7 +419,7 @@ 
 
     // too many arguments - something is wrong
     } else {
-      error(getPos(), const_cast<char*>("Too many args in content stream"));
+      error(errInternal, getPos(), const_cast<char*>("Too many args in content stream"));
       if (printCommands) {
 	printf("throwing away arg: ");
 	obj.print(stdout);
@@ -436,7 +436,7 @@ 
 
   // args at end with no command
   if (numArgs > 0) {
-    error(getPos(), const_cast<char*>("Leftover args in content stream"));
+    error(errInternal, getPos(), const_cast<char*>("Leftover args in content stream"));
     if (printCommands) {
       printf("%d leftovers:", numArgs);
       for (i = 0; i < numArgs; ++i) {
@@ -502,7 +502,7 @@ 
   name = cmd->getCmd();
   if (!(op = findOp(name))) {
     if (ignoreUndef == 0)
-      error(getPos(), const_cast<char*>("Unknown operator '%s'"), name);
+      error(errInternal, getPos(), const_cast<char*>("Unknown operator '%s'"), name);
     return;
   }
 
@@ -510,26 +510,26 @@ 
   argPtr = args;
   if (op->numArgs >= 0) {
     if (numArgs < op->numArgs) {
-      error(getPos(), const_cast<char*>("Too few (%d) args to '%s' operator"), numArgs, name);
+      error(errInternal, getPos(), const_cast<char*>("Too few (%d) args to '%s' operator"), numArgs, name);
       return;
     }
     if (numArgs > op->numArgs) {
 #if 0
-      error(getPos(), "Too many (%d) args to '%s' operator", numArgs, name);
+      error(errInternal, getPos(), "Too many (%d) args to '%s' operator", numArgs, name);
 #endif
       argPtr += numArgs - op->numArgs;
       numArgs = op->numArgs;
     }
   } else {
     if (numArgs > -op->numArgs) {
-      error(getPos(), const_cast<char*>("Too many (%d) args to '%s' operator"),
+      error(errInternal, getPos(), const_cast<char*>("Too many (%d) args to '%s' operator"),
 	    numArgs, name);
       return;
     }
   }
   for (i = 0; i < numArgs; ++i) {
     if (!checkArg(&argPtr[i], op->tchk[i])) {
-      error(getPos(), const_cast<char*>("Arg #%d to '%s' operator is wrong type (%s)"),
+      error(errInternal, getPos(), const_cast<char*>("Arg #%d to '%s' operator is wrong type (%s)"),
 	    i, name, argPtr[i].getTypeName());
       return;
     }
@@ -690,7 +690,7 @@ 
     return;
   }
   if (!obj1.isDict()) {
-    error(getPos(), const_cast<char*>("ExtGState '%s' is wrong type"), args[0].getName());
+    error(errInternal, getPos(), const_cast<char*>("ExtGState '%s' is wrong type"), args[0].getName());
     obj1.free();
     return;
   }
@@ -705,7 +705,7 @@ 
     if (state->parseBlendMode(&obj2, &mode)) {
       state->setBlendMode(mode);
     } else {
-      error(getPos(), const_cast<char*>("Invalid blend mode in ExtGState"));
+      error(errInternal, getPos(), const_cast<char*>("Invalid blend mode in ExtGState"));
     }
   }
   obj2.free();
@@ -764,7 +764,7 @@ 
       state->setTransfer(funcs);
     }
   } else if (!obj2.isNull()) {
-    error(getPos(), const_cast<char*>("Invalid transfer function in ExtGState"));
+    error(errInternal, getPos(), const_cast<char*>("Invalid transfer function in ExtGState"));
   }
   obj2.free();
 
@@ -784,7 +784,7 @@ 
 	funcs[0] = Function::parse(&obj3);
 	if (funcs[0]->getInputSize() != 1 ||
 	    funcs[0]->getOutputSize() != 1) {
-	  error(getPos(),
+	  error(errInternal, getPos(),
 		const_cast<char*>("Invalid transfer function in soft mask in ExtGState"));
 	  delete funcs[0];
 	  funcs[0] = NULL;
@@ -809,11 +809,7 @@ 
 	  blendingColorSpace = NULL;
 	  isolated = knockout = gFalse;
 	  if (!obj4.dictLookup(const_cast<char*>("CS"), &obj5)->isNull()) {
-#ifdef POPPLER_NEW_COLOR_SPACE_API
 	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL);
-#else
-	    blendingColorSpace = GfxColorSpace::parse(&obj5);
-#endif
 	  }
 	  obj5.free();
 	  if (obj4.dictLookup(const_cast<char*>("I"), &obj5)->isBool()) {
@@ -840,15 +836,15 @@ 
 	    delete funcs[0];
 	  }
 	} else {
-	  error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
+	  error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
 	}
 	obj4.free();
       } else {
-	error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
+	error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
       }
       obj3.free();
     } else if (!obj2.isNull()) {
-      error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState"));
+      error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState"));
     }
   }
   obj2.free();
@@ -876,7 +872,7 @@ 
   // check form type
   dict->lookup(const_cast<char*>("FormType"), &obj1);
   if (!(obj1.isNull() || (obj1.isInt() && obj1.getInt() == 1))) {
-    error(getPos(), const_cast<char*>("Unknown form type"));
+    error(errInternal, getPos(), const_cast<char*>("Unknown form type"));
   }
   obj1.free();
 
@@ -884,7 +880,7 @@ 
   dict->lookup(const_cast<char*>("BBox"), &obj1);
   if (!obj1.isArray()) {
     obj1.free();
-    error(getPos(), const_cast<char*>("Bad form bounding box"));
+    error(errInternal, getPos(), const_cast<char*>("Bad form bounding box"));
     return;
   }
   for (i = 0; i < 4; ++i) {
@@ -1012,19 +1008,11 @@ 
 
   state->setFillPattern(NULL);
   res->lookupColorSpace(args[0].getName(), &obj);
-#ifdef POPPLER_NEW_COLOR_SPACE_API
   if (obj.isNull()) {
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
   } else {
     colorSpace = GfxColorSpace::parse(&obj, NULL);
   }
-#else
-  if (obj.isNull()) {
-    colorSpace = GfxColorSpace::parse(&args[0]);
-  } else {
-    colorSpace = GfxColorSpace::parse(&obj);
-  }
-#endif
   obj.free();
   if (colorSpace) {
     state->setFillColorSpace(colorSpace);
@@ -1032,7 +1020,7 @@ 
     state->setFillColor(&color);
     builder->updateStyle(state);
   } else {
-    error(getPos(), const_cast<char*>("Bad color space (fill)"));
+    error(errInternal, getPos(), const_cast<char*>("Bad color space (fill)"));
   }
 }
 
@@ -1043,19 +1031,11 @@ 
 
   state->setStrokePattern(NULL);
   res->lookupColorSpace(args[0].getName(), &obj);
-#ifdef POPPLER_NEW_COLOR_SPACE_API
   if (obj.isNull()) {
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
   } else {
     colorSpace = GfxColorSpace::parse(&obj, NULL);
   }
-#else
-  if (obj.isNull()) {
-    colorSpace = GfxColorSpace::parse(&args[0]);
-  } else {
-    colorSpace = GfxColorSpace::parse(&obj);
-  }
-#endif
   obj.free();
   if (colorSpace) {
     state->setStrokeColorSpace(colorSpace);
@@ -1063,7 +1043,7 @@ 
     state->setStrokeColor(&color);
     builder->updateStyle(state);
   } else {
-    error(getPos(), const_cast<char*>("Bad color space (stroke)"));
+    error(errInternal, getPos(), const_cast<char*>("Bad color space (stroke)"));
   }
 }
 
@@ -1072,7 +1052,7 @@ 
   int i;
 
   if (numArgs != state->getFillColorSpace()->getNComps()) {
-    error(getPos(), const_cast<char*>("Incorrect number of arguments in 'sc' command"));
+    error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'sc' command"));
     return;
   }
   state->setFillPattern(NULL);
@@ -1088,7 +1068,7 @@ 
   int i;
 
   if (numArgs != state->getStrokeColorSpace()->getNComps()) {
-    error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SC' command"));
+    error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SC' command"));
     return;
   }
   state->setStrokePattern(NULL);
@@ -1109,7 +1089,7 @@ 
       if (!((GfxPatternColorSpace *)state->getFillColorSpace())->getUnder() ||
 	  numArgs - 1 != ((GfxPatternColorSpace *)state->getFillColorSpace())
 	                     ->getUnder()->getNComps()) {
-	error(getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
+	error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
 	return;
       }
       for (i = 0; i < numArgs - 1 && i < gfxColorMaxComps; ++i) {
@@ -1120,23 +1100,15 @@ 
       state->setFillColor(&color);
       builder->updateStyle(state);
     }
-#ifdef POPPLER_NEW_COLOR_SPACE_API
     if (args[numArgs-1].isName() &&
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
       state->setFillPattern(pattern);
       builder->updateStyle(state);
     }
-#else
-    if (args[numArgs-1].isName() &&
-	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
-      state->setFillPattern(pattern);
-      builder->updateStyle(state);
-    }
-#endif
 
   } else {
     if (numArgs != state->getFillColorSpace()->getNComps()) {
-      error(getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
+      error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
       return;
     }
     state->setFillPattern(NULL);
@@ -1161,7 +1133,7 @@ 
 	       ->getUnder() ||
 	  numArgs - 1 != ((GfxPatternColorSpace *)state->getStrokeColorSpace())
 	                     ->getUnder()->getNComps()) {
-	error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
+	error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
 	return;
       }
       for (i = 0; i < numArgs - 1 && i < gfxColorMaxComps; ++i) {
@@ -1172,23 +1144,15 @@ 
       state->setStrokeColor(&color);
       builder->updateStyle(state);
     }
-#ifdef POPPLER_NEW_COLOR_SPACE_API
     if (args[numArgs-1].isName() &&
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
       state->setStrokePattern(pattern);
       builder->updateStyle(state);
     }
-#else
-    if (args[numArgs-1].isName() &&
-	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
-      state->setStrokePattern(pattern);
-      builder->updateStyle(state);
-    }
-#endif
 
   } else {
     if (numArgs != state->getStrokeColorSpace()->getNComps()) {
-      error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
+      error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
       return;
     }
     state->setStrokePattern(NULL);
@@ -1212,7 +1176,7 @@ 
 
 void PdfParser::opLineTo(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in lineto"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in lineto"));
     return;
   }
   state->lineTo(args[0].getNum(), args[1].getNum());
@@ -1222,7 +1186,7 @@ 
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in curveto"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto"));
     return;
   }
   x1 = args[0].getNum();
@@ -1238,7 +1202,7 @@ 
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in curveto1"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto1"));
     return;
   }
   x1 = state->getCurX();
@@ -1254,7 +1218,7 @@ 
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in curveto2"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto2"));
     return;
   }
   x1 = args[0].getNum();
@@ -1282,7 +1246,7 @@ 
 
 void PdfParser::opClosePath(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in closepath"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in closepath"));
     return;
   }
   state->closePath();
@@ -1298,7 +1262,7 @@ 
 
 void PdfParser::opStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1314,7 +1278,7 @@ 
 
 void PdfParser::opCloseStroke(Object * /*args[]*/, int /*numArgs*/) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/stroke"));
     return;
   }
   state->closePath();
@@ -1331,7 +1295,7 @@ 
 
 void PdfParser::opFill(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in fill"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in fill"));
     return;
   }
   if (state->isPath()) {
@@ -1347,7 +1311,7 @@ 
 
 void PdfParser::opEOFill(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in eofill"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in eofill"));
     return;
   }
   if (state->isPath()) {
@@ -1363,7 +1327,7 @@ 
 
 void PdfParser::opFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in fill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in fill/stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1376,7 +1340,7 @@ 
 
 void PdfParser::opCloseFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/fill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/fill/stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1388,7 +1352,7 @@ 
 
 void PdfParser::opEOFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in eofill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in eofill/stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1399,7 +1363,7 @@ 
 
 void PdfParser::opCloseEOFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/eofill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/eofill/stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1440,7 +1404,7 @@ 
     doShadingPatternFillFallback((GfxShadingPattern *)pattern, gFalse, eoFill);
     break;
   default:
-    error(getPos(), const_cast<char*>("Unimplemented pattern type (%d) in fill"),
+    error(errInternal, getPos(), const_cast<char*>("Unimplemented pattern type (%d) in fill"),
 	  pattern->getType());
     break;
   }
@@ -1459,7 +1423,7 @@ 
     doShadingPatternFillFallback((GfxShadingPattern *)pattern, gTrue, gFalse);
     break;
   default:
-    error(getPos(), const_cast<char*>("Unimplemented pattern type (%d) in stroke"),
+    error(errInternal, getPos(), const_cast<char*>("Unimplemented pattern type (%d) in stroke"),
 	  pattern->getType());
     break;
   }
@@ -1579,15 +1543,9 @@ 
   double *matrix = NULL;
   GBool savedState = gFalse;
 
-#ifdef POPPLER_NEW_COLOR_SPACE_API
   if (!(shading = res->lookupShading(args[0].getName(), NULL))) {
     return;
   }
-#else
-  if (!(shading = res->lookupShading(args[0].getName()))) {
-    return;
-  }
-#endif
 
   // save current graphics state
   if (shading->getType() != 2 && shading->getType() != 3) {
@@ -1768,14 +1726,14 @@ 
     colors2[2] = colorM0;
     colors2[3] = colorMM;
     doFunctionShFill1(shading, x0, y0, xM, yM, colors2, depth + 1);
-    
+
     // lower-left sub-rectangle
     colors2[0] = color0M;
     colors2[1] = colors[1];
     colors2[2] = colorMM;
     colors2[3] = colorM1;
     doFunctionShFill1(shading, x0, yM, xM, y1, colors2, depth + 1);
-    
+
     // upper-right sub-rectangle
     colors2[0] = colorM0;
     colors2[1] = colorMM;
@@ -2156,7 +2114,7 @@ 
 
 void PdfParser::opShowText(Object args[], int numArgs) {
   if (!state->getFont()) {
-    error(getPos(), const_cast<char*>("No font in show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in show"));
     return;
   }
   if (fontChanged) {
@@ -2170,7 +2128,7 @@ 
   double tx, ty;
 
   if (!state->getFont()) {
-    error(getPos(), const_cast<char*>("No font in move/show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in move/show"));
     return;
   }
   if (fontChanged) {
@@ -2188,7 +2146,7 @@ 
   double tx, ty;
 
   if (!state->getFont()) {
-    error(getPos(), const_cast<char*>("No font in move/set/show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in move/set/show"));
     return;
   }
   if (fontChanged) {
@@ -2211,7 +2169,7 @@ 
   int i;
 
   if (!state->getFont()) {
-    error(getPos(), const_cast<char*>("No font in show/space"));
+    error(errInternal, getPos(), const_cast<char*>("No font in show/space"));
     return;
   }
   if (fontChanged) {
@@ -2236,7 +2194,7 @@ 
     } else if (obj.isString()) {
       doShowText(obj.getString());
     } else {
-      error(getPos(), const_cast<char*>("Element of show/space array must be number or string"));
+      error(errInternal, getPos(), const_cast<char*>("Element of show/space array must be number or string"));
     }
     obj.free();
   }
@@ -2248,7 +2206,7 @@ 
  * The `POPPLER_NEW_GFXFONT' stuff is for the change to GfxFont's getNextChar() call.
  * Thanks to tsdgeos for the fix.
  * Miklos, does this look ok?
- */   
+ */
 
 void PdfParser::doShowText(GooString *s) {
   GfxFont *font;
@@ -2334,7 +2292,7 @@ 
 	if (charProc.isStream()) {
 	  //parse(&charProc, gFalse); // TODO: parse into SVG font
 	} else {
-	  error(getPos(), const_cast<char*>("Missing or bad Type3 CharProc entry"));
+	  error(errInternal, getPos(), const_cast<char*>("Missing or bad Type3 CharProc entry"));
 	}
 	//out->endType3Char(state);
 	if (resDict) {
@@ -2366,7 +2324,7 @@ 
 			    u, (int)(sizeof(u) / sizeof(Unicode)), &uLen,
 #endif
 			    &dx, &dy, &originX, &originY);
-      
+
       if (wMode) {
 	dx *= state->getFontSize();
 	dy = dy * state->getFontSize() + state->getCharSpace();
@@ -2410,7 +2368,7 @@ 
     return;
   }
   if (!obj1.isStream()) {
-    error(getPos(), const_cast<char*>("XObject '%s' is wrong type"), name);
+    error(errInternal, getPos(), const_cast<char*>("XObject '%s' is wrong type"), name);
     obj1.free();
     return;
   }
@@ -2426,9 +2384,9 @@ 
 /*    out->psXObject(obj1.getStream(),
     		   obj3.isStream() ? obj3.getStream() : (Stream *)NULL);*/
   } else if (obj2.isName()) {
-    error(getPos(), const_cast<char*>("Unknown XObject subtype '%s'"), obj2.getName());
+    error(errInternal, getPos(), const_cast<char*>("Unknown XObject subtype '%s'"), obj2.getName());
   } else {
-    error(getPos(), const_cast<char*>("XObject subtype is missing or wrong type"));
+    error(errInternal, getPos(), const_cast<char*>("XObject subtype is missing or wrong type"));
   }
   obj2.free();
   obj1.free();
@@ -2559,11 +2517,7 @@ 
       }
     }
     if (!obj1.isNull()) {
-#ifdef POPPLER_NEW_COLOR_SPACE_API
       colorSpace = GfxColorSpace::parse(&obj1, NULL);
-#else
-      colorSpace = GfxColorSpace::parse(&obj1);
-#endif
     } else if (csMode == streamCSDeviceGray) {
       colorSpace = new GfxDeviceGrayColorSpace();
     } else if (csMode == streamCSDeviceRGB) {
@@ -2648,11 +2602,7 @@ 
 	  obj2.free();
 	}
       }
-#ifdef POPPLER_NEW_COLOR_SPACE_API
       maskColorSpace = GfxColorSpace::parse(&obj1, NULL);
-#else
-      maskColorSpace = GfxColorSpace::parse(&obj1);
-#endif
       obj1.free();
       if (!maskColorSpace || maskColorSpace->getMode() != csDeviceGray) {
 	goto err1;
@@ -2758,7 +2708,7 @@ 
  err2:
   obj1.free();
  err1:
-  error(getPos(), const_cast<char*>("Bad image parameters"));
+  error(errInternal, getPos(), const_cast<char*>("Bad image parameters"));
 }
 
 void PdfParser::doForm(Object *str) {
@@ -2783,7 +2733,7 @@ 
   // check form type
   dict->lookup(const_cast<char*>("FormType"), &obj1);
   if (!(obj1.isNull() || (obj1.isInt() && obj1.getInt() == 1))) {
-    error(getPos(), const_cast<char*>("Unknown form type"));
+    error(errInternal, getPos(), const_cast<char*>("Unknown form type"));
   }
   obj1.free();
 
@@ -2791,7 +2741,7 @@ 
   dict->lookup(const_cast<char*>("BBox"), &bboxObj);
   if (!bboxObj.isArray()) {
     bboxObj.free();
-    error(getPos(), const_cast<char*>("Bad form bounding box"));
+    error(errInternal, getPos(), const_cast<char*>("Bad form bounding box"));
     return;
   }
   for (i = 0; i < 4; ++i) {
@@ -2827,11 +2777,7 @@ 
     if (obj1.dictLookup(const_cast<char*>("S"), &obj2)->isName(const_cast<char*>("Transparency"))) {
       transpGroup = gTrue;
       if (!obj1.dictLookup(const_cast<char*>("CS"), &obj3)->isNull()) {
-#ifdef POPPLER_NEW_COLOR_SPACE_API
 	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL);
-#else
-	blendingColorSpace = GfxColorSpace::parse(&obj3);
-#endif
       }
       obj3.free();
       if (obj1.dictLookup(const_cast<char*>("I"), &obj3)->isBool()) {
@@ -2967,7 +2913,7 @@ 
   // display the image
   if (str) {
     doImage(NULL, str, gTrue);
-  
+
     // skip 'EI' tag
     c1 = str->getUndecodedStream()->getChar();
     c2 = str->getUndecodedStream()->getChar();
@@ -2990,7 +2936,7 @@ 
   parser->getObj(&obj);
   while (!obj.isCmd(const_cast<char*>("ID")) && !obj.isEOF()) {
     if (!obj.isName()) {
-      error(getPos(), const_cast<char*>("Inline image dictionary key must be a name object"));
+      error(errInternal, getPos(), const_cast<char*>("Inline image dictionary key must be a name object"));
       obj.free();
     } else {
       key = copyString(obj.getName());
@@ -3005,7 +2951,7 @@ 
     parser->getObj(&obj);
   }
   if (obj.isEOF()) {
-    error(getPos(), const_cast<char*>("End of file in inline image"));
+    error(errInternal, getPos(), const_cast<char*>("End of file in inline image"));
     obj.free();
     dict.free();
     return NULL;
@@ -3020,11 +2966,11 @@ 
 }
 
 void PdfParser::opImageData(Object args[], int numArgs) {
-  error(getPos(), const_cast<char*>("Internal: got 'ID' operator"));
+  error(errInternal, getPos(), const_cast<char*>("Internal: got 'ID' operator"));
 }
 
 void PdfParser::opEndImage(Object args[], int numArgs) {
-  error(getPos(), const_cast<char*>("Internal: got 'EI' operator"));
+  error(errInternal, getPos(), const_cast<char*>("Internal: got 'EI' operator"));
 }
 
 //------------------------------------------------------------------------
--- inkscape-0.48.2/src/extension/internal/pdfinput/svg-builder.cpp	2012-05-27 01:55:07.000000000 +0200
+++ inkscape-0.48.2/src/extension/internal/pdfinput/svg-builder.cpp	2012-05-27 02:18:01.410549224 +0200
@@ -1,6 +1,6 @@ 
  /** \file
  * Native PDF import using libpoppler.
- * 
+ *
  * Authors:
  *   miklos erdelyi
  *
@@ -14,7 +14,7 @@ 
 # include <config.h>
 #endif
 
-#include <string> 
+#include <string>
 
 #ifdef HAVE_POPPLER
 
@@ -74,7 +74,7 @@ 
 
 /**
  * \class SvgBuilder
- * 
+ *
  */
 
 SvgBuilder::SvgBuilder(SPDocument *document, gchar *docname, XRef *xref) {
@@ -398,7 +398,7 @@ 
     Inkscape::CSSOStringStream os_opacity;
     os_opacity << state->getFillOpacity();
     sp_repr_css_set_property(css, "fill-opacity", os_opacity.str().c_str());
-    
+
     // Fill rule
     sp_repr_css_set_property(css, "fill-rule", even_odd ? "evenodd" : "nonzero");
 }
@@ -414,7 +414,7 @@ 
     } else {
         sp_repr_css_set_property(css, "fill", "none");
     }
-    
+
     if (stroke) {
         _setStrokeStyle(css, state);
     } else {
@@ -865,7 +865,7 @@ 
 
 /*
     MatchingChars
-    Count for how many characters s1 matches sp taking into account 
+    Count for how many characters s1 matches sp taking into account
     that a space in sp may be removed or replaced by some other tokens
     specified in the code. (Bug LP #179589)
 */
@@ -898,16 +898,16 @@ 
 {
     double bestMatch = 0;
     std::string bestFontname = "Arial";
-    
+
     for (guint i = 0; i < _availableFontNames.size(); i++) {
         std::string fontname = _availableFontNames[i];
-        
+
         // At least the first word of the font name should match.
         guint minMatch = fontname.find(" ");
         if (minMatch == std::string::npos) {
            minMatch = fontname.length();
         }
-        
+
         int Match = MatchingChars(PDFname, fontname);
         if (Match >= minMatch) {
             double relMatch = (float)Match / (fontname.length() + PDFname.length());
@@ -961,9 +961,7 @@ 
     _font_style = sp_repr_css_attr_new();
     GfxFont *font = state->getFont();
     // Store original name
-    if (font->getOrigName()) {
-        _font_specification = font->getOrigName()->getCString();
-    } else if (font->getName()) {
+    if (font->getName()) {
         _font_specification = font->getName()->getCString();
     } else {
         _font_specification = (char*) "Arial";
@@ -992,7 +990,7 @@ 
     // Font family
     if (font->getFamily()) { // if font family is explicitly given use it.
         sp_repr_css_set_property(_font_style, "font-family", font->getFamily()->getCString());
-    } else { 
+    } else {
         int attr_value = 1;
         sp_repr_get_int(_preferences, "localFonts", &attr_value);
         if (attr_value != 0) {
@@ -1250,7 +1248,7 @@ 
                 break;
             } else {
                 tspan_node = _xml_doc->createElement("svg:tspan");
-                
+
                 ///////
                 // Create a font specification string and save the attribute in the style
                 PangoFontDescription *descr = pango_font_description_from_string(glyph.font_specification);
@@ -1734,7 +1732,7 @@ 
         Inkscape::GC::release(image_node);
     }
 }
-    
+
 void SvgBuilder::addSoftMaskedImage(GfxState *state, Stream *str, int width, int height,
                                     GfxImageColorMap *color_map,
                                     Stream *mask_str, int mask_width, int mask_height,
